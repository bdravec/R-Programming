# R provides a wide variety of tools for data visualization. The base R
# graphics package allows for simple plots, while more advanced visualizations
# can be created using external libraries like ggplot2.
#
# Plotting with the base R is done using the plot() function. This function can
# be used for creating scatter plots, line plots, and more.
#
# ## 3.1 Basic Scatter Plots
# If not specified otherwise, the plot function creates a Scatter plot.
x <- seq(0,2*pi,length.out=50)
y <- sin(x)
# Basic scatter plot
plot(x, y)
# Basic scatter plot
plot(x, y)
# Example 1 (Line Plot)
plot(x, y, type="l")
# Example 2 (Lines and Points)
plot(x, y, type="o")
# R provides a wide variety of tools for data visualization. The base R
# graphics package allows for simple plots, while more advanced visualizations
# can be created using external libraries like ggplot2.
#
# Plotting with the base R is done using the plot() function. This function can
# be used for creating scatter plots, line plots, and more.
#
# ## 3.1 Basic Scatter Plots
# If not specified otherwise, the plot function creates a Scatter plot.
x <- seq(0,2*pi,length.out=50)
y <- sin(x)
# Basic scatter plot
plot(x, y)
# R provides a wide variety of tools for data visualization. The base R
# graphics package allows for simple plots, while more advanced visualizations
# can be created using external libraries like ggplot2.
#
# Plotting with the base R is done using the plot() function. This function can
# be used for creating scatter plots, line plots, and more.
#
# ## 3.1 Basic Scatter Plots
# If not specified otherwise, the plot function creates a Scatter plot.
x <- seq(0,4*pi,length.out=50)
# Basic scatter plot
plot(x, y)
# R provides a wide variety of tools for data visualization. The base R
# graphics package allows for simple plots, while more advanced visualizations
# can be created using external libraries like ggplot2.
#
# Plotting with the base R is done using the plot() function. This function can
# be used for creating scatter plots, line plots, and more.
#
# ## 3.1 Basic Scatter Plots
# If not specified otherwise, the plot function creates a Scatter plot.
x <- seq(0,2*pi,length.out=50)
# Basic scatter plot
plot(x, y)
y <- sin(x)
# Basic scatter plot
plot(x, y)
# Example 1 (Line Plot)
plot(x, y, type="l")
# Example 2 (Lines and Points)
plot(x, y, type="o")
plot(x, y, type="o")
plot(x, y, type="b")
plot(x, y, type="h")
plot(x, y, type="S")
# Examples
plot(x, y, col="red")
plot(x, y, type="l", col=rgb(200, 112, 255, maxColorValue = 255))
plot(x, y, col=948372, pch=0)
plot(x, y, col=346578, pch=0)
plot(x, y, col=346578, pch=19)
plot(x, y, type="o", pch=2)
#
# Some common lty-values are
#
# - lty=1: Solid line.
# - lty=2: Dashed line.
# - lty=3: Dotted line.
#
# With lwd the line width can be specified.
#
# Examples
plot(x, y, type="l", col="blue", lty=4)
plot(x, y, type="o", pch=19, lty=1, col="green", lwd=2)
plot(x, y, type="o", pch=19, lty=1, col="green")
plot(x, y, type="o", pch=19, lty=1, col="green", lwd=2)
plot(x, y, type="o", pch=19, lty=1, col="green", lwd=7)
plot(x, y, type="o", pch=19, lty=1, col="green", lwd=1)
## 3.5 Axis Labelling and Titles
# You can add titles and axis labels using
#
# - main: Adds a main title to the plot
# - xlab: Adds a label to the x-axis
# - ylab: Adds a label to the y-axis
#
# Example
plot(x, y, type="l", main = "Main Title",
xlab = "x-Label", ylab = "y-Label")
## 3.5 Axis Labelling and Titles
# You can add titles and axis labels using
#
# - main: Adds a main title to the plot
# - xlab: Adds a label to the x-axis
# - ylab: Adds a label to the y-axis
#
# Example
plot(x, y, type="l", main = "Main Title",
xlab = "x-Label", ylab = "y-Label")
## Axis Limits
# You set the axis limits using
#
# - xlim: range for the x-axis.
# - ylim: range for the y-axis.
#
# Example
plot(x, y, type="l", xlim = c(0,2*pi), ylim=c(-2,2))
## 3.6 Multiple lines
# If you would like to display multiple functions in the same plot, then the
# typical approach is to first use plot() for the initial function and then
# use lines() or points() to overlay the additional functions or points.
#
# Example
z <- cos(x)
tan <- tan(x)
plot(x, y, type="l", col="red", ylim = c(-7,7))
lines(x,z, lty=2, col="purple")
points(x, tan, pch=19, col="pink")
## 3.6 Legends
# As soon as you display multiple functions in the same plot it is helpful
# to additionally add a legend to your plot.
#
# Example
plot(x, y, type="l", col="red", ylim = c(-7,7))
lines(x,z, lty=2, col="purple")
points(x, tan, pch=19, col="pink")
legend("bottomleft", legend = c("sin(x)", "cos(x)", "tan(x)"), bty = "n",
col = c("red", "purple", "pink"),
lty = c(1, 2, NA), pch = c(NA, NA, 19))
## 3.6 Multiple Plots Side by Side
# If you want more control over the plotting area, use par() to adjust
# the margins, layout, and other graphical parameters before plotting. Here, we
# only look at the option to have multiple plots displayed in a grid.
#
# Example
par(mfrow = c(1, 2)) # Set up the plotting area with multiple panels (1 row, 2 column)
## 3.6 Multiple Plots Side by Side
# If you want more control over the plotting area, use par() to adjust
# the margins, layout, and other graphical parameters before plotting. Here, we
# only look at the option to have multiple plots displayed in a grid.
#
# Example
par(mfrow = c(1, 2)) # Set up the plotting area with multiple panels (1 row, 2 column)
plot(x, y, type="l", col="red", main="sin(x)") # draw 1st plot
plot(x,z, type="l", lty=2, col="purple", main="cos(x)") # draw 2nd plot
par(mfrow = c(1, 1)) # reset plotting area
par(mfrow = c(1, 1)) # reset plotting area
# Solution
x <- exp(x)
y <- log(y)
plot(x,y)
plot(x)
y <- log(y)
plot(y)
plot(y)
y <- log(y)
plot(y)
plot(x)
# Solution
x <- exp(-2< x < 2)
plot(x, type="l")
log(y)
y <- seq(0, 2, lenght.out=40)
log(y)
plot(x,y)
plot(x,y)
plot(x)
plot(y)
#plot exponential fct first
plot(x, y_exp, type = "l", col = "blue", lwd = 2,
ylim = c(min(x), max(y_exp)),  # make room for both curves
main = "Exponential and Natural Logarithm",
xlab = "x", ylab = "Value")
# Solution
x <- seq(-2,2, Length.out=40)
y_exp <- exp(x)
#y values for logarith (y>0)
y_log <- log(y_exp)
#plot exponential fct first
plot(x, y_exp, type = "l", col = "blue", lwd = 2,
ylim = c(min(x), max(y_exp)),  # make room for both curves
main = "Exponential and Natural Logarithm",
xlab = "x", ylab = "Value")
#plot exponential fct first
plot(x, y_exp, type = "l", col = "blue", lwd = 2,
ylim = c(min(x), max(y_exp)),  # make room for both curves
main = "Exponential and Natural Logarithm",
xlab = "x", ylab = "Value")
lines(x, y_log, col = "red", lwd = 2)
x <- seq(-2, 2, length.out = 100)
y_exp <- exp(x)
y_log <- log(y_exp)
plot(x, y_exp, type = "l", col = "blue", lwd = 2,
ylim = c(min(x), max(y_exp)),
main = "Exponential and Natural Logarithm",
xlab = "x", ylab = "Value")
lines(x, y_log, col = "red", lwd = 2)
legend("topleft", legend = c("exp(x)", "log(y)"), col = c("blue", "red"), lwd = 2)
grid()
tan <- tan(x)
plot(x, y, type="l", col="red", ylim = c(-7,7))
an <- tan(x)
plot(x, y, type="l", col="red", ylim = c(-7,7))
tan <- tan(x)
plot(x, y, type="l", col="red", ylim = c(-7,7))
x <- seq(-4.5, 4.5, 0.001)
y <- exp(x)
# base plot (axes)
plot(c(-4.5, 4.5), c(0, 0), type="l", col="green",
xlab='x', ylab='f(x)',
xlim=c(-4, 4), ylim=c(-4, 4),
main="Exponential function and natural logarithm")
abline(v=0, col='green')
abline(a=0, b=1, col='magenta')
# plot exp(x)
lines(x, y, lwd=2)
# plot ln(y)
lines(x, log(y), lwd=2, col='blue')  # <- fix here
# add legend
legend(x='topleft',
lty=1,
lwd=2,
legend=c('f(x) = exp(x)','f(x) = ln(x)'),
col=c('black','blue'))
# plot ln(y)
lines(y, x, lwd=2, col='blue')  # <- fix here
abline(a=0, b=1, col='magenta')
abline(a=0, b=1, col='pink')
abline(a=0, b=1, col='magenta')
# 4. Control flow
#
## 4.1 Logicals
# We saw already the data type logi (logical).
#
### 4.1.1 Logical Operators
# Logical operators are used to perform logical comparisons.
#
# a) and (&)
x <- c(TRUE, FALSE, TRUE, FALSE)
y <- c(TRUE, TRUE, FALSE, FALSE)
x & y  # returns TRUE FALSE FALSE FALSE
# b) or (|)
x | y  # returns TRUE TRUE TRUE FALSE
# c) negation (!)
! x # returns FALSE TRUE FALSE TRUE
# c) negation (!)
! x # returns FALSE TRUE FALSE TRUE
### 4.1.2 Logical Comparisons
# Logical comparisons return TRUE or FALSE based on certain conditions.
#
# a) equality (==)
2 == 2  # returns TRUE
3 == 2  # returns FALSE
# b) Inequality (!=)
3 != 2  # returns TRUE
# c) Greater than (>), Less than (<)
2 < 2 # returns FALSE
2 > 1 # returns TRUE
# d) Greater than or equal to (>=), Less than or equal to (<=)
2 <= 2 # returns TRUE
2 >= 1 # returns TRUE
x <- 5
if (x > 3) {
print("x is greater than 3")
} else {
print("x is less than or equal to 3")
}
### 4.2.2 Using if without else
# You can use a standalone if statement without an else clause if you only
# want to execute the code when the condition is TRUE. The notation then reduces to
#
# if (condition){
#   statements to be executed if condition == TRUE
#
#   Example
x <- 5
if (x > 3) {
print("x is greater than 3")
}
#  else if (condition 2){
#   statements to be executed if condition1 == FALSE
#   and condition2 == TRUE
#  else{
#   statements to be executed if condition1 == FALSE
#   and condition2 == FALSE
#
# This can be repeated using additional conditions.
#
# Example
x <- 10
if (x < 0) {
print("x is negative")
} else if (x == 0) {
print("x is zero")
} else {
print("x is positive")
}
# Example 2
#
# Expressing temperatures on the Fahrenheit, Celsius and Kelvin scale.
# Choose a scale (pick one):
Scale <- "Fahrenheit"
Scale <- "Fahrenheit"
Scale <- "F"
Scale <- "Celsius"
Scale <- "C"
Scale <- "Kelvin"
Scale <- "K"
str(Scale)
Scale <- "Celsius"
str(Scale)
# Specify a temperature value:
Temp <- 30
if (substr(Scale,1,1)=="F" | substr(Scale,1,1) == "f"){
TempC <- (Temp - 32)*5/9
TempK <- TempC + 273.15
c('Celsius'=TempC,'Fahrenheit'=Temp,'Kelvin'=TempK)
} else if (substr(Scale,1,1)=="C" | substr(Scale,1,1) == "c"){
TempF <- 32 + 9*Temp/5
TempK <- Temp + 273.15
c('Celsius'=Temp,'Fahrenheit'=TempF,'Kelvin'=TempK)
} else{
TempC <- Temp - 273.15
TempF <- 32 + 9*TempC/5
c('Celsius'=TempC,'Fahrenheit'=TempF,'Kelvin'=Temp)
}
N <- 20  # should be > 2
x <- rep(1,N)
for (n in 3:N){
x[n] <- x[n-2] + x[n-1]
}
x
str(x)
# Initialise x:
N <- 5  # should be > 2
x <- rep(1,N)
str(x)
for (n in 3:N){
x[n] <- x[n-2] + x[n-1]
}
x
N <- 15  # should be > 2
x <- rep(1,N)
str(x)
for (n in 3:N){
x[n] <- x[n-2] + x[n-1]
}
x
sum <- 0
i <- 1
# sum numbers until the total exceeds 100
while (sum <= 100) {
sum <- sum + i
i <- i + 1
}
print(paste("i =", i, "sum =", sum))
M <- matrix(1:9, nrow = 3, byrow = TRUE)
# Outer loop iterates over rows
for (i in 1:nrow(M)) {
row_sum <- 0
# Inner loop iterates over all columns for that row
for (j in 1:ncol(M)) {
row_sum <- row_sum + M[i, j]
}
print(paste("Sum of row", i, "is", row_sum))
}
Temperature <- function(Temp=30, Scale="Fahrenheit"){
if (substr(Scale,1,1)=="F" | substr(Scale,1,1) == "f"){
TempF <- Temp
TempC <- (Temp - 32)*5/9
TempK <- TempC + 273.15
} else if (substr(Scale,1,1)=="C" | substr(Scale,1,1) == "c"){
TempC <- Temp
TempF <- 32 + 9*Temp/5
TempK <- Temp + 273.15
} else {
TempK <- Temp
TempC <- Temp - 273.15
TempF <- 32 + 9*TempC/5
}
return(c('Celsius'=TempC,'Fahrenheit'=TempF,'Kelvin'=TempK))
}
# Then we can use the function Temperature as follows
Temperature(Scale='fahrensomething',Temp=80)
Temperature(Temp=273.15,Scale='Kelvin')
# - Run the command source('filename.R') to execute all commands in filename.R',
#   in particular, all functions within that file.
#
# Then one can use the function(s) within the R console or script files
# during the current session.
#
# ## Example:
#
# Have a look at the script file "DNA_Functions.R". We can now source and use
# those functions in a separate script file.
source("DNA_Functions.R") # source function file
sequence <- "ATGCGATCGATCGATCGTAGCTAGCTAGCTAGC"
GC_content(sequence)
DNA_to_RNA(sequence)
source("assignment2_functions.R")
source("assignment2_functions.R")
# Start game
play_hangman()
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
#
# TODO:
lines(c(1, 1), c(1, 8), lwd = 2)
lines(c(1, 4), c(8, 8), lwd = 2)
lines(c(1, 2), c(8, 7), lwd = 2)
lines(c(4, 4), c(8, 7), lwd = 2)
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
#
# TODO:
lines(c(1, 1), c(1, 8), lwd = 2)
lines(c(1, 4), c(8, 8), lwd = 2)
lines(c(1, 2), c(7, 8), lwd = 2)
lines(c(4, 4), c(8, 7), lwd = 2)
draw_hangman <- function(wrong_count) {
# Always draw the gallows first
#
# HINT: use the lines() function for horizontal and
# vertical lines. To test you can first open an empty plot
# before running draw_hangman(...):
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
#
# Draw the gallows
# Draw the main vertical pole
lines(c(1, 1), c(1, 8), lwd = 2)
# - top horizontal pole
lines(c(1, 4), c(8, 8), lwd = 2)
# - the small support beam
lines(c(1, 2), c(7, 8), lwd = 2)
# - the rope
lines(c(4, 4), c(8, 7), lwd = 2)
# Start game
play_hangman(0)
# Start game
play_hangman(1)
source("assignment2_functions.R")
# Start game
play_hangman(1)
draw_hangman(0)  # Just gallows
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
draw_hangman(0)  # Just gallows
draw_hangman <- function(wrong_count) {
# Always draw the gallows first
#
# HINT: use the lines() function for horizontal and
# vertical lines. To test you can first open an empty plot
# before running draw_hangman(...):
# plot.new()
# plot.window(xlim = c(0, 10), ylim = c(0, 10))
#
# Draw the gallows
# Draw the main vertical pole
lines(c(1, 1), c(1, 8), lwd = 2)
# - top horizontal pole
lines(c(1, 4), c(8, 8), lwd = 2)
# - the small support beam
lines(c(1, 2), c(7, 8), lwd = 2)
# - the rope
lines(c(4, 4), c(8, 7), lwd = 2)
# Next, conditionally draw parts of the hangman based on
# the value of `wrong_count`
#  Draw the Head if one or more incorrect guesses
# symbols() helps drawing a circle
if (wrong_count >= 1) {
symbols(4, 6.5, circles = 0.5, add = TRUE, inches = FALSE, lwd = 2)
}
#  Draw the Body if two or more incorrect guesses
if (wrong_count >= 2) {
lines(c(4, 4), c(6, 4.5), lwd = 2)
}
#  Draw the Left Arm
if (wrong_count >= 3) {
lines(c(4, 3), c(5.5, 4.5), lwd = 2)
}
#  Draw the Right Arm
if (wrong_count >= 4) {
lines(c(4, 5), c(5.5, 4.5), lwd = 2)
}
#  Draw the Left Leg
if (wrong_count >= 5) {
lines(c(4, 3), c(4.5, 3), lwd = 2)
}
#  Draw the Right Leg
if (wrong_count >= 6) {
lines(c(4, 5), c(4.5, 3), lwd = 2)
}
source(assignment2_function.R)
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
draw_hangman(0)  # Should show just gallows
exit
plot.new()
plot.window(xlim = c(0, 10), ylim = c(0, 10))
draw_hangman(0)  # Just gallows
